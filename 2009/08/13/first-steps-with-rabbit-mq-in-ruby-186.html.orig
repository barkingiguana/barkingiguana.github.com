<p>Until recently I was more than happy using ActiveMQ as my message broker. I had heard of <a href="http://www.rabbitmq.com/">RabbitMQ</a> several times but never took the chance to look into it. A <a href="http://skillsmatter.com/podcast/ajax-ria/amqp-in-ruby">recent talk</a> at <a href="http://www.lrug.org/">LRUG</a> made me decide that I had left it too long and that if I didn't start investigating soon I'd be left behind.</p>

<p>Here's how I got started using RabbitMQ 1.6.0 on OS X under Ruby 1.8.6.</p>

<h2>Installation</h2>

<pre><code> mkdir /tmp/rabbit-mq &amp;&amp; cd /tmp/rabbit-mq
 wget http://www.rabbitmq.com/releases/rabbitmq-server/v1.6.0/rabbitmq-server-generic-unix-1.6.0.tar.gz
 tar -xzvf rabbitmq-server-generic-unix-1.6.0.tar.gz
 sudo mv rabbitmq_server-1.6.0/ /opt/local/lib
</code></pre>

<h2>Running the server</h2>

<pre><code>sudo /opt/local/lib/rabbitmq_server-1.6.0/sbin/rabbitmq-server
</code></pre>

<p>Seriously, that's it.</p>

<h2>Passing messages</h2>

<p>When I wrote about <a href="http://barkingiguana.com/blog/2009/01/01/writing-rubystomp-clients-with-smqueue">getting started with SMQueue</a> I created a consumer that pushed timestamps onto the queue and a consumer that printed the values from the queue to the terminal. Recreating that using the AMQP gem is simple.</p>

<p>First, install the AMQP gem.</p>

<pre><code>gem sources -a http://gems.github.com
gem install tmm1-amqp
</code></pre>

<p>Open an IRB session and paste this code to create a producer:</p>

<pre><code class="ruby">require 'mq'
EM.run {
  broker = MQ.new
  EM.add_periodic_timer(1) { 
    broker.queue("timestamps").publish(Time.now.to_f)
  }
}
</code></pre>

<p>Open another IRB session and paste this to create a consumer:</p>

<pre><code class="ruby">require 'mq'
EM.run {
  broker = MQ.new
  broker.queue("timestamps").subscribe { |timestamp|
    time = Time.at(timestamp.to_f)
    puts "Got #{timestamp} which is #{time}"
  }
}
</code></pre>

<p>Profit. RabbitMQ is <em>extremely</em> easy to get started with. I don't imagine that it would take too much effort to write an adaptor for SMQueue to easily change deployed projects to use it without changing their implementation. If you do this I'd love to hear about it.</p>
