<p>The stack trace is one of the most valuable pieces of information you can have when trying to debug a problem. It tells you what line of code was being run when an error was thrown and gives you an idea of the execution path that lead to that line of code being run.</p>

<p>Quick plea then. Please don't do this:</p>

<pre><code class="ruby">def foo
  do_something
rescue => e
  puts "Problem: #{e}"
  raise e
end</code></pre>

<p>This will start a new stack trace at <code class="ruby">raise e</code>. If I rescue this further up the stack there's no indication of where the problem was originally encountered - I just get pointed at your error handling code. Precious information, gone.</p>

<p>Do this instead:</p>

<pre><code class="ruby">def foo
  do_something
rescue => e
  puts "Problem: #{e}"
  raise
end</code></pre>

<p>Note the lack of argument in the call to <code class="ruby">raise</code>. This tells Ruby to <a href="http://web.njit.edu/all_topics/Prog_Lang_Docs/html/ruby/syntax.html#raise">re-raise the last exception</a>. The stack trace remains intact and debugging can continue unhindered. Glory be!</p>
