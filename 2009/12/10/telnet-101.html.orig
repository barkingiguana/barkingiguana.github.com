<p>Telnet has been around since before the dawn of (<a href="http://en.wikipedia.org/wiki/Unix_time">Unix</a>) time but surprisingly few people know how to use this extremely useful tool to track down problems with many popular services. A few seconds with Telnet can save hours of frustrating searching, trial and error, and screaming at the computer.</p>

<p>Telnet can be used to simulate many plain-text protocols. I've used it to talk to <a href="http://barkingiguana.com/2008/07/07/high-availability-mysql-on-ubuntu-804">MySQL</a>, <a href="http://barkingiguana.com/2009/03/04/memcache-statistics-from-the-command-line">Memcached</a> and <a href="http://barkingiguana.com/2008/06/22/a-simple-email-hub-for-your-local-network">Postfix</a>. Here I'll show how to use it to test that an HTTP daemon can serve content over HTTP/1.1.</p>

<h3>What is HTTP?</h3>

<p>Before we can use telnet to simulate HTTP we need to know more about HTTP - what is it and how it works.</p>

<p>HTTP/1.1 - HyperText Transfer Protocol - is a plain-text protocol defined in <a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html">RFC2616</a>. It's used for a great many things, but the most visible one for most people is as a transport mechanism for web pages.</p>

<p>When you request a webpage a few special operations are performed (which I'll gloss over because they're beyond the scope of this article). After those have completed your web browser connects to the web server and sends it a requests for a page. A typical request for a web page looks something like this:</p>

<pre><code>GET / HTTP/1.1
Host: example.com

</code></pre>

<p>The format of the request is:</p>

<pre><code>[HTTPMETHOD] [PATH TO WEBPAGE] HTTP/1.1
Host: [SERVERNAME]
[BLANK LINE]</code></pre>

<p>The server responds with something similar except after the blank line there's usually the page you requested.</p>

<pre><code>HTTP/1.1 200 OK
Server: Apache/2.2.3 (Red Hat)
Last-Modified: Tue, 15 Nov 2005 13:24:10 GMT
ETag: "b300b4-1b6-4059a80bfd280"
Accept-Ranges: bytes
Content-Type: text/html; charset=UTF-8
Connection: close     
Date: Thu, 10 Dec 2009 10:37:33 GMT
Age: 7114   
Content-Length: 438

&lt;HTML&gt;
&lt;HEAD&gt;
  &lt;TITLE&gt;Example Web Page&lt;/TITLE&gt;
&lt;/HEAD&gt; 
&lt;body&gt;  
&lt;p&gt;You have reached this web page by typing &quot;example.com&quot;,
&quot;example.net&quot;,
  or &quot;example.org&quot; into your web browser.&lt;/p&gt;
&lt;p&gt;These domain names are reserved for use in documentation and are not available 
  for registration. See &lt;a href="http://www.rfc-editor.org/rfc/rfc2606.txt"&gt;RFC 
  2606&lt;/a&gt;, Section 3.&lt;/p&gt;
&lt;/BODY&gt;
&lt;/HTML&gt</code></pre>

<p>The format of the response is:</p>

<pre><code>HTTP/1.1 [RESPONSE STATUS]
[RESPONSE HEADERS]
[BLANK LINE]
[REQUESTED WEBPAGE]</code></pre>

<p>There's a <em>lot</em> more to the HTTP protocol, but it's all document in rather a lot of (rather dry) detail in <a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html">RFC2616</a>. Mostly you can just skim the RFC for the parts you're interested in.</p>

<h3>Simulated Awesome</h3>

<p>Okay, so now we've got an idea how HTTP can be used to request a webpage. How do we go from that to using telnet to show it works?</p>

<p>The <a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?telnet">telnet manpage</a> says that the telnet command can take arguments for host and port. In the above example we were requesting a page from example.com so that's the host we'll use. Typically HTTP is served on port 80, and this is true of example.com so we'll use that as the port.</p>

<pre><code class="bash">telnet example.com 80</code></pre>

<p>With that we're connected to the HTTP service - the web server - on example.com. You'll see output something like this as connects:</p>

<pre><code>Trying 192.0.32.10...
Connected to example.com.
Escape character is '^]'.</code></pre>

<p>Once connected you'll be left with your cursor on a blank line. This is where you can start pretending to be a web browser.</p>

<p>Type in the GET request shown in the "What is HTTP?" section above (including the blank line at the end). After a short delay you should get back the example.com webpage.</p>

<h3>How is this useful?</h3>

<p>Requesting a webpage by hand can quickly expose several common problems.</p>

<ul>
  <li>Misconfigured firewalls mean telnet won't connect.</li>
  <li>The status code returned can tell you a lot about what the server did with your request. <a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html">RFC2616</a> contains a <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">list of HTTP status codes and their meaning</a>.</li>
  <li>You avoid problems which may be caused by your browser caching the old version of files you request.</li>
  <li>You can easily check all the headers that the server sends back.</li>
  <li>By adding headers such as <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3">Accept-Encoding</a> you can check that your assets are being served gzipped when it is requested.</li>
</ul>

<p>Telnet isn't limited to checking just HTTP either. SMTP, IMAP, POP and many others can be simulated using telnet. It's not a silver bullet, but it's a very useful tool.</p>
