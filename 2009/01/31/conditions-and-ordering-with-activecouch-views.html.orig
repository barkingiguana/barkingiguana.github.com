<p>When I posted about my <a href="http://barkingiguana.com/2009/01/08/breaking-activecouch-in-fun-and-inventive-ways">hacking on ActiveCouch</a> I noted that it didn't yet support ordering. Well, since commit <code>87120176</code> it does. Ordering isn't as fine-grained as ActiveRecord (yet), but it's good enough for what I need to do: set conditions on the finder and have the results ordered by <code>posted_at</code> date and then <code>id</code>.</p>

<p>I say it's not as fine-grained as ActiveRecord because that can quite easily construct queries that are <code class="sql">order by posted_at asc, id desc, created_at desc, author asc</code>. ActiveCouch can only order view results by key though - either ascending or descending. I don't think that this is an insurmountable challenge, I just haven't needed that much control yet.</p>

<p>How does it work? I hear you ask. Or at least I hear voices ask. Well, not so much ask as whisper to me. Yes, chocolate. Let's eat the chocolate. All the chocolate. Mmm.</p>

<p>Uhh, anyway. When you want to find by a condition but you don't so much care about the order ActiveCouch creates a view which emits keys based on just those conditions. Maybe you want to find all articles with author "craig@barkingiguana.com" that have a "Live" status.</p>

<pre><code class="ruby">Article.find(:all, :conditions => { :author_id => "craig@barkingiguana.com", :status => "Live" })</code></pre>

<p>The first time this query is run ActiveCouch will create a view called <code>by_author_id_and_status</code> in the <code>articles</code> design document. The view will emit a key based on the author_id and the status and then it will emit the full document.</p>

<pre><code class="javascript">{
  "_id": "_design/articles",
  "_rev": "1532981864",
  "language": "javascript",
  "views": {
    "by_author_id_and_status": {
      "map": "function(doc) { if(doc.type == 'article') { emit([doc.author_id, doc.status], doc); }  }"
    }
    // other views cut for brevity
  }
}</pre></code>

<p>The query will then run against this view, asking for a key <code class="javascript">[ "craig@barkingiguana.com", "Live" ]</code> which will exactly match the keys of several of the documents.</p>

<p>When a query is run with an order a slightly different approach is taken. Since these are articles they're probably time-sensitive so let's order them by the date they were <code>posted_at</code>.</p>

<pre><code class="ruby">Article.find(:all, :conditions => { :author_id => "craig@barkingiguana.com", :status => "Live" }, :order => :posted_at)</code></pre>

<p>The first time this query is run it will create a view very similar to the previous query, except the key that the view emits will include the <code>posted_at</code> attribute and the view will be named <code>by_author_id_and_status_and_posted_at</code>.</p>

<pre><code class="javascript">{
  "_id": "_design/articles",
  "_rev": "3752119467",
  "language": "javascript",
  "views": {
    "by_author_id_and_status_and_posted_at": {
      "map": "function(doc) { if(doc.type == 'article') { emit([doc.author_id, doc.status, doc.posted_at], doc); }  }"
    }
    // other view omitted for brevity
  }
}</code></pre>

<p>When the query is run it'll take advantage of CouchDB's <a href="http://wiki.apache.org/couchdb/View_collation">view collation specification</a> by asking for result keys that, based on the finder conditions, are between the lowest possible key and the highest possible key. For the example above this means that it'd ask for keys between <code class="javascript">[ "craig@barkingiguana.com", "Live" ]</code> and <code class="javascript">[ "craig@barkingiguana.com", "Live", "\u9999" ]</code> ("\u9999" is an extremely high value unicode character as recommended in the view collation specification).</p>

<p>Since CouchDB view results are <a href="http://barkingiguana.com/2009/01/22/filtering-and-ordering-couchdb-view-results">ordered by the keys</a>, the key contains the attributes we want to order by, and we're calculating a range of keys that will contain any key that starts with the conditions we're looking for we now have simple sorting and conditions for finders.</p>

<p>Of course, since I've just done this work you don't have to worry about the internals. You can grab the code now using git: <code>git clone http://barkingiguana.com/~craig/code/activecouch.git</code>. There's a getting started section in my <a href="http://barkingiguana.com/2009/01/08/breaking-activecouch-in-fun-and-inventive-ways">previous post</a> on ActiveCouch. Enjoy, and please let me know if you're using this code!</p>
