<p><a href="http://github.com/seanohalpin/smqueue/tree/master">SMQueue</a> makes writing Ruby clients that interact with message queues pretty much trivial. It's got adaptors for Spread, Stomp and Stdio. Which is pretty handy 'cause that <a href="http://barkingiguana.com/2008/12/16/high-availability-activemq-using-a-mysql-datastore">message queue</a> I setup a few weeks back talks Stomp and I'm quite into Ruby.</p>

<h4>Installing SMQueue</h4>

<p>The origin SMQueue repository doesn't yet have a way of producing a gem so there are two ways to install SMQueue: add a vendor/gems/smqueue directory to your project or build a gem from my SMQueue repository. Oddly enough, I've gone with the later approach.</p>

<p>Clone my repository and you'll see there's a gemspec file. You can use that to build a gem using the <code>gem</code> command. The whole process looks something like this:</p>

<pre><code>git clone http://barkingiguana.com/~craig/smqueue.git
cd smqueue
gem build smqueue.gemspec
sudo gem install ./smqueue-0.1.0.gem</code></pre>

<p>I'm reliably informed that when SMQueue does build into a gem it'll start at 0.2.0 so having a 0.1.0 installed wont cause any clashes.</p>

<p>Note that I've removed the Spread adaptor from my branch because I don't have a working spread client on my system and I can't get SMQueue to load without one. I'm sure that'll be fixed in a future release.</p>

<h4>Basic assumptions</h4>

<p>I've made the following assumptions for this article: that you have a working Ruby 1.8.6 install, and that you have an ActiveMQ instance running locally with the Stomp connector enabled. You'll have to change the code to match your environment if these assumptions aren't correct.</p>

<h4>A simple producer</h4>

<p>Now that SMQueue is installed I'll take a contrived example and implement it. Let's say I want an ascending number to be put onto a queue roughly every second. A pretty good source for these numbers might be the current time represented as seconds from the epoch. Handily I can get just such a number really easily in Ruby.</p>

<pre><code class="ruby">&gt;&gt; Time.now.to_i
=&gt; 1230602445
&gt;&gt; Time.now.to_i
=&gt; 1230602446
&gt;&gt; Time.now.to_i
=&gt; 1230602447</code></pre>

<p>I can get a number to be output every second by wrapping it in a loop and sleeping a second at the end of the loop.</p>

<pre><code class="ruby">&gt;&gt; loop do
?&gt;   puts Time.now.to_i
&gt;&gt;   sleep 1
&gt;&gt; end
1230602557
1230602558
1230602559</code></pre>

<p>Easy enough to get them on STDOUT, but how do I get them into a queue? Well, for that I need to start using the SMQueue library, create a client for the queue, and put a representation of the number onto the queue.</p>

<pre><code class="ruby">require 'rubygems'
require 'smqueue'

queue = SMQueue(
  :name => "/queue/numbers.ascending",
  :host => "localhost",
  :adapter => :StompAdapter
)

loop do
  number = Time.now.to_i
  puts "Sending #{number}"
  queue.puts number.to_yaml
  sleep 1
end</code></pre>

<p>Paste the below into a terminal somewhere to kick off the producer. You should see a steady stream of output - about one message a second - saying that it's sending a number.</p>

<pre><code>cat &gt; producer.rb &lt;&lt;EOF
require 'rubygems'
require 'smqueue'

queue = SMQueue(
  :name =&gt; "/queue/numbers.ascending",
  :host =&gt; "localhost",
  :adapter =&gt; :StompAdapter
)

loop do
  number = Time.now.to_i
  puts "Sending #{number}"
  queue.puts number.to_yaml
  sleep 1
end
EOF
ruby producer.rb</code></pre>

<h4>A simple consumer</h4>

<p>Now that I have a simple producer running, l'll take the messages and convert them back into a time. It's a pretty pointless task for the consumer, but it'll show just how easy it is to write one.</p>

<pre><code class="ruby">require 'rubygems'
require 'smqueue'
require 'yaml'

queue = SMQueue(
  :name =&gt; "/queue/numbers.ascending",
  :host =&gt; "localhost",
  :adapter =&gt; :StompAdapter
)

queue.get do |message|
  number = YAML.parse(message.body).transform
  time = Time.at(number)
  puts "Got #{number} which is #{time}"
end</code></pre>

<p>Let's go through the important parts in more detail.</p>

<p>I tell the queue that I want to capture messages.</p>

<pre><code class="ruby">queue.get do |message|</code></pre>

<p>The producer put the messages in as YAML so I need to transform them back to their native state. I can do this by parsing the YAML then transforming it.</p>

<pre><code class="ruby">number = YAML.parse(message.body).transform</code></pre>

<p>Now that I have the number, I convert it to a time and output both the original number and the calculated time.</p>

<pre><code class="ruby">time = Time.at(number)
puts "Got #{number} which is #{time}"</code></pre>

<p>That's pretty much it... run the below code to start running the consumer.</p>

<pre><code>cat &gt; consumer.rb &lt;&lt;EOF
require 'rubygems'
require 'smqueue'
require 'yaml'

queue = SMQueue(
  :name =&gt; "/queue/numbers.ascending",
  :host =&gt; "localhost",
  :adapter =&gt; :StompAdapter
)

queue.get do |message|
  number = YAML.parse(message.body).transform
  time = Time.at(number)
  puts "Got #{number} which is #{time}"
end
EOF
ruby consumer.rb
</code></pre>

<p>For each message that your producer creates you should now see your consumer print a message to the screen.</p>
