<p>I've been hearing about Story Driven Development (SDD) for a while but I haven't tried it out because I was under the impression that there was a huge amount to learn and setup before I could get going. I'm not sure if that used to be true, but I started using Cucumber yesterday and it was really easy.</p>

<h4>Install and configure</h4>

<p>You'll need to install a bunch of RubyGems.</p>

<pre><code>sudo gem install nokogiri term-ansicolor treetop diff-lcs hpricot cucumber</code></pre>

<p>Install Cucumber into your Rails app.</p>

<pre><code>ruby script/generate cucumber</code></pre>

<p>Install WebRAT. Unfortuantely this doesn't seem to be available as a RubyGem. If you're using Git then install this as a submodule instead. We're not so I clone the repository then <code>svn add</code> it.</p>

<pre><code>git clone git://github.com/brynary/webrat.git vendor/plugin/webrat</code></pre>

<h4>Writing your first story</h4>

<p>Stories have three components: a business value, the role of a person that uses the feature and some description of the feature.</p>

<pre><code>In order to [do something with business value]
As [role]
Should [describe the feature]</code></pre>

<p>An example might be the ability to order a pizza from the online ordering system of a pizza delivery company.</p>

<pre><code>Feature: Order Pizza
  In order to get some hot, tasty pizza
  A hungry pizza lover
  Should be able to order pizza</code></pre>

<p>Next we need to define some scenarios. Scenarios are things that can happen during the story. Most pizza places aren't open 24 hours a day so two simple scenarios are (1) the pizza shop is closed, and (2) the pizza shop is open.</p>

<pre><code>  Scenario: The pizza shop is closed
    Given the pizza shop is closed
    And I am on the home page
    And I click "Feed Me!"
    Then I should see "Sorry, the shop is closed"

  Scenario: The pizza shop is open
    Given the pizza shop is open
    And I am on the home page
    And I click "Feed Me!"
    Then I should see "Your pizza will be with you soon"</code></pre>

<p>The above description should go in a file called something like <code>features/order_pizza.feature</code> where it is lovely and version controlled and safe.</p>

<p>So, we now have a story that describes how a feature should behave. How does that get turned into acceptance tests? Well, you could pass these descriptions off to your testing team, or you could turn them into part of your test suite.</p>

<h4>Automated tests: better than cake</h4>

<p>You might notice that when installing Cucumber you got the directory <code>features/steps</code>. That's where you tell your test suite how to understand your stories. There are already two files here: <code>common_webrat.rb</code> which gives your test suite a few funky things like the ability to click links and <code>env.rb</code> which does pretty much the same stuff as <code>spec/spec_helper.rb</code> except for Cucumber. You can ignore <code>env.rb</code>, but <code>common_webrat.rb</code> will provide a few examples of how to start writing story steps.</p>

<p>Create a new file, <code>order_pizza_steps.rb</code>. This is where you define the steps involved in ordering pizza. It's pretty much just regular expressions which match each line of a scenario to some Ruby code.</p>

<pre><code class="ruby">
Given /the pizza shop is open/ do
  PizzaShop.open = true
end

Given /the pizza shop is closed/ do
  PizzaShop.open = false
end

And /I am on the home page/ do
  visits "/"
end</code></pre>

<p>That's all we need to do. The common WebRAT steps provide the necessary mapping for clicking buttons and checking for feedback.</p>

<h4>Running your stories</h4>

<p>This is pretty simple: run <code>rake features</code>. You should get some rather pretty coloured output, and if anything has gone wrong Cucumber is pretty good at suggesting ways to fix it.</p>

<h4>Found this article useful?</h4>

<p>If you enjoyed this article I'd appreciate recommendations at <a href="http://www.workingwithrails.com/recommendation/new/person/7241-craig-webster">Working with Rails</a>.</p>
